//////////	InputManager.as////////package com.chasedelanguillette.system.input{	// custom imports	// standard imports	import flash.display.Stage;	import flash.events.KeyboardEvent;	import flash.events.Event;		public class InputManager	{		private static var _instance:InputManager;		public static function get instance():InputManager		{			if (!_instance) _instance = new InputManager();			return _instance;		}		///// CONSTANTS		/// SPECIAL KEYS		public static const KEY_SPACE:int 			= 32;		public static const KEY_RETURN:int 			= 13;		public static const KEY_ESC:int 			= 27;		public static const KEY_TILDE:int 			= 192;		public static const KEY_CTRL:int 			= 17;		public static const KEY_TAB:int 			= 9;		public static const KEY_SHIFT:int 			= 16;		public static const KEY_MINUS:int 			= 189;		public static const KEY_PLUS:int 			= 187;		// ARROW KEYS		public static const KEY_LEFT:int 			= 37;		public static const KEY_RIGHT:int 			= 39;		public static const KEY_UP:int 				= 38;		public static const KEY_DOWN:int 			= 40;		// NUM KEYS		public static const KEY_0:int 				= 48;		public static const KEY_1:int 				= 49;		public static const KEY_2:int 				= 50;		public static const KEY_3:int 				= 51;		public static const KEY_4:int 				= 52;		public static const KEY_5:int 				= 53;		public static const KEY_6:int 				= 54;		public static const KEY_7:int 				= 55;		public static const KEY_8:int 				= 56;		public static const KEY_9:int 				= 57;		// QWERTY ROW                           		public static const KEY_Q:int 				= 81;		public static const KEY_W:int 				= 87;		public static const KEY_E:int 				= 69;		public static const KEY_R:int 				= 82;		public static const KEY_T:int 				= 84;		public static const KEY_Y:int 				= 89;		public static const KEY_U:int 				= 85;		public static const KEY_I:int 				= 73;		public static const KEY_O:int 				= 79;		public static const KEY_P:int 				= 80;		public static const KEY_BRACKET_OPEN:int 	= 219;		public static const KEY_BRACKET_CLOSE:int 	= 221;		public static const KEY_BACKSLASH:int		= 220;		// ASDF ROW		public static const KEY_A:int 				= 65;		public static const KEY_S:int 				= 83;		public static const KEY_D:int 				= 68;		public static const KEY_F:int 				= 70;		public static const KEY_G:int 				= 71;		public static const KEY_H:int 				= 72;		public static const KEY_J:int 				= 74;		public static const KEY_K:int 				= 75;		public static const KEY_L:int 				= 76;		public static const KEY_COLON:int 			= 186;		public static const KEY_APOSTROPHE:int 		= 222;                                                		// ZXCV ROW                             		public static const KEY_Z:int 				= 90;		public static const KEY_X:int 				= 88;		public static const KEY_C:int 				= 67;		public static const KEY_V:int 				= 86;		public static const KEY_B:int 				= 66;		public static const KEY_N:int 				= 78;		public static const KEY_M:int 				= 77;		public static const KEY_COMMA:int 			= 188;		public static const KEY_PERIOD:int 			= 190;		public static const KEY_QUESTION:int 		= 191;					public static const keyNames:Array 			= new Array(255);		keyNames[KEY_SPACE] = "<SPACE>";  				keyNames[KEY_RETURN] = "<RETURN>";  				keyNames[KEY_ESC] = "esc";  				keyNames[KEY_TILDE] = "~";  				keyNames[KEY_CTRL] = "<CONTROL>";  				keyNames[KEY_TAB] = "<TAB>";  				keyNames[KEY_SHIFT] = "<SHIFT>";  				keyNames[KEY_MINUS] = "-";  				keyNames[KEY_PLUS] = "+";  				keyNames[KEY_LEFT] = "<LEFT>";  				keyNames[KEY_RIGHT] = "<RIGHT>";  				keyNames[KEY_UP] = "<UP>";  					keyNames[KEY_DOWN] = "<DOWN>";  				keyNames[KEY_0] = "0";  					keyNames[KEY_1] = "1";  					keyNames[KEY_2] = "2";  					keyNames[KEY_3] = "3";  					keyNames[KEY_4] = "4";  					keyNames[KEY_5] = "5";  					keyNames[KEY_6] = "6";  					keyNames[KEY_7] = "7";  					keyNames[KEY_8] = "8";  					keyNames[KEY_9] = "9";  			                    		keyNames[KEY_Q] = "Q";  					keyNames[KEY_W] = "W";  					keyNames[KEY_E] = "E";  					keyNames[KEY_R] = "R";  					keyNames[KEY_T] = "T";  					keyNames[KEY_Y] = "Y";  					keyNames[KEY_U] = "U";  					keyNames[KEY_I] = "I";  					keyNames[KEY_O] = "O";  					keyNames[KEY_P] = "P";  					keyNames[KEY_BRACKET_OPEN] = "[";  		keyNames[KEY_BRACKET_CLOSE] = "]";  		keyNames[KEY_BACKSLASH] = "|"; 			keyNames[KEY_A] = "A";  					keyNames[KEY_S] = "S";  					keyNames[KEY_D] = "D";  					keyNames[KEY_F] = "F";  					keyNames[KEY_G] = "G";  					keyNames[KEY_H] = "H";  					keyNames[KEY_J] = "J";  					keyNames[KEY_K] = "K";  					keyNames[KEY_L] = "L";  					keyNames[KEY_COLON] = ";";  				keyNames[KEY_APOSTROPHE] = "\'";  	                   		keyNames[KEY_Z] = "Z";  					keyNames[KEY_X] = "X";  					keyNames[KEY_C] = "C";  					keyNames[KEY_V] = "V";  					keyNames[KEY_B] = "B";  					keyNames[KEY_N] = "N";  					keyNames[KEY_M] = "M";  					keyNames[KEY_COMMA] = ",";  				keyNames[KEY_PERIOD] = ".";  		  		keyNames[KEY_QUESTION] = "/";  			//// PRIVATES		private var _key:Array = new Array(255);		private var _keysToWatch:Array = [];		public function get keysToWatch() { return _keysToWatch; }		public function clearKeysToWatch():void		{			_keysToWatch = [];		}		public function watchKey(key:int):void		{			if (_keysToWatch.indexOf(key) == -1)			{				_keysToWatch.push(key);			}		}		public function unwatchKey(key:int):void		{			var index:int = _keysToWatch.indexOf(key);			if (index != -1)			{				_keysToWatch.splice(index, 1);			}		}				public function InputManager():void		{			for (var keyIndex:int = 0; keyIndex < 255; keyIndex++)			{				_key[keyIndex] = 0;			}		}		public function initialize(focusObj:*):void		{			for (var keyIndex:int = 0; keyIndex < 255; keyIndex++)			{				_key[keyIndex] = 0;			}						focusObj.addEventListener( KeyboardEvent.KEY_DOWN, handleKeyDown );			focusObj.addEventListener( KeyboardEvent.KEY_UP, handleKeyUp );		};				public function get key():Array{			return _key;		}				public function keyPushed(key:int):Boolean		{			return (_key[key] == 1);		}				public function keyDown(key:int):Boolean		{			return (_key[key] > 0);		}				public function keyReleased(key:int):Boolean		{			return (_key[key] == -1);		}				public function update():void		{			var keyTotal:int = _keysToWatch.length;			for (var keyIndex:int = 0; keyIndex < keyTotal; keyIndex++)			{				var keyCode:int = _keysToWatch[keyIndex];				if (_key[keyCode] != 0)				{					_key[keyCode]++;				}			}		}				//========================================================		// events		//========================================================		private function handleKeyDown( evt:KeyboardEvent ):void		{			//trace("InputManager::vHandle_KeyDown() evt.keyCode: " + evt.keyCode + " _key[evt.keyCode]: " + _key[evt.keyCode]);			//trace( evt.keyCode );			_key[evt.keyCode] = Math.max(_key[evt.keyCode], 1);		};				private function handleKeyUp( evt:KeyboardEvent ):void		{			//trace("InputManager::vHandle_KeyUp() _key[evt.keyCode]: " + _key[evt.keyCode]);			_key[evt.keyCode] = -1;		};			}}