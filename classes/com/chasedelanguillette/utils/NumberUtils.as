package com.chasedelanguillette.utils{	public class NumberUtils	{		// RANDOM RANGE!		public static function rand(low:int, high:int):int		{			return Math.floor(Math.random() * ((high + 1) -  low)) + low;		}				public static function nGetRandomNumberRange(fRandom:Number, low:int, high:int):int		{			return Math.floor(fRandom * ((high + 1) -  low)) + low;		}				public static function sudorand(fRandom:Number, low:int, high:int):int		{			return Math.floor(fRandom* ((high + 1) -  low)) + low;		}				// LINEAR INTERPOLATION!		public static function lerp (startValue:Number, changeInValue:Number, currentStep:Number, totalSteps:Number):Number 		{			return changeInValue * currentStep / totalSteps + startValue;		}				public static function dist(x1:int, y1:int, x2:int, y2:int):Number		{			var dx:int = x1 - x2;			var dy:int = y1 - y2;			return Math.sqrt(dx*dx + dy*dy);		}				public function getNumberAsHexString(number:uint, minimumLength:uint = 1, showHexDenotation:Boolean = true):String 		{			// The string that will be output at the end of the function.			var string:String = number.toString(16).toUpperCase();			// While the minimumLength argument is higher than the length of the string, add a leading zero.			while (minimumLength > string.length) 			{				string = "0" + string;			}			// Return the result with a "0x" in front of the result.			if (showHexDenotation) { string = "0x" + string; }			return string;       }	}}