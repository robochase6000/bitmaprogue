/////////////////////////////////////////////////////	RoomListLoader//	CREATED: 2009-09-24.//	BY: CHASE DE LANGUILLETTE - chase.delanguillette@gmail.com////	CLASS RESPONSIBILITES://////////////////////////////////////////////////////package com.chasedelanguillette.roguish.maps.loading{	//============================================	//	CUSTOM IMPORTS	//============================================	import com.chasedelanguillette.XmlLoader;	import com.chasedelanguillette.roguish.editor.roomEditor.MapData;	import com.chasedelanguillette.roguish.editor.roomEditor.MapParser;		//============================================	//	STANDARD IMPORTS	//============================================	import flash.events.Event;	import flash.events.EventDispatcher;		public class RoomListLoader extends EventDispatcher	{				//============================================		//	CONSTANTS		//============================================								//============================================		//	PUBLIC VARS		//============================================										//============================================		//	PRIVATE VARS		//============================================				private var _aoRoomLoaders:Array = new Array();		private var _aoMapData:Array = new Array();						//////////////////////////////////////////////		//		//	CONSTRUCTOR		//		//////////////////////////////////////////////				public function RoomListLoader(szRoomListURL:String):void		{			var roomListLoader:XmlLoader = new XmlLoader(szRoomListURL);						roomListLoader.addEventListener( Event.COMPLETE, vHandle_roomListLoader_COMPLETE );		};				public function get aoMapData():Array{			return _aoMapData;		};						////////////////////////////////////////////////////////////////////////////////////////////				private function vHandle_roomListLoader_COMPLETE(evt:Event):void		{			var roomListLoader:XmlLoader = evt.target as XmlLoader;						var rooms:XMLList = roomListLoader.loadedXML.children();			for each (var r:XML in rooms)			{				// Mon Aug 17 12:55:27 CDT 2009 CMD TODO: Consider not loading every single xml room all at once?				// A more dynamic system of loading/unloading parts as they are needed would be much more versatile (tho prone to error)				var roomLoader:XmlLoader = new XmlLoader(r.@url);				roomLoader.addEventListener( Event.COMPLETE, vHandle_roomLoader_COMPLETE );				_aoRoomLoaders.push(roomLoader);			}		};				private function vHandle_roomLoader_COMPLETE(evt:Event):void		{			//var completeRoomLoader:XmlLoader = evt.target as XmlLoader;						// figure out if we've loaded every room this wad requires			var bDoneLoadingRooms:Boolean = true;			for (var i:String in _aoRoomLoaders)			{				var roomLoader:XmlLoader = _aoRoomLoaders[i];				if (!roomLoader.bLoaded)				{					bDoneLoadingRooms = false;					break;				}			};						if (bDoneLoadingRooms)			{				// tell someone we're done!				trace("RoomListLoader::vHandle_roomLoader_COMPLETE() -> DONE LOADING ROOMS!");				convertRoomXMLToMapDataObjects();			}		};				private function convertRoomXMLToMapDataObjects():void		{			trace("RoomListLoader::convertRoomXMLToMapDataObjects()");						for (var i:String in _aoRoomLoaders)			{				var roomLoader:XmlLoader = _aoRoomLoaders[i];				var mapData:MapData = MapParser.parse(roomLoader.loadedXML);				_aoMapData.push(mapData);			}						dispatchEvent(new Event(Event.COMPLETE));		};	}}