/////////////////////////////////////////////////////	DungeonMaker//	CREATED: 2009-09-23.//	BY: CHASE DE LANGUILLETTE - chase.delanguillette@gmail.com////	CLASS RESPONSIBILITES://	The dungeon maker takes a room set, map dimensions, and whatever else and produces a floor map object.//	That is all it does. all the data it needs to build the floor map is piped in from elsewhere.//	KISS = Keep it simple, stupid.////////////////////////////////////////////////////package com.chasedelanguillette.roguish.maps.building{	//============================================	//	CUSTOM IMPORTS	//============================================	import com.chasedelanguillette.utils.MersenneTwister;		import com.chasedelanguillette.roguish.maps.Minimap;	import com.chasedelanguillette.roguish.maps.FloorMap;		import com.chasedelanguillette.roguish.maps.building.MazeCreator;	import com.chasedelanguillette.roguish.maps.building.RoomCreator;	import com.chasedelanguillette.roguish.maps.building.MonsterCreator;	import com.chasedelanguillette.roguish.maps.building.ItemCreator;	import com.chasedelanguillette.roguish.maps.building.TileConverter;		import com.chasedelanguillette.roguish.editor.roomEditor.MapData;		//============================================	//	STANDARD IMPORTS	//============================================		import flash.events.Event;	import flash.display.Sprite;	import flash.utils.getTimer;		public class DungeonMaker extends Sprite	{				//============================================		//	CONSTANTS		//============================================				public static const MAX_CALCULATION_TIME:int = Math.floor((1/30) * 1000);// Wed Sep 23 20:18:14 CDT 2009 CMD TODO: move to init system!				public static const STEP_CLEAN_UP:int						= -1		public static const STEP_CREATE_MAZE:int 					= 0;		public static const STEP_CREATE_FLOOR_MAP:int 				= 1;		public static const STEP_ROLL_FOR_GREAT_HALL:int 			= 2;		public static const STEP_ROLL_FOR_MONSTER_HOUSE:int 		= 3;		public static const STEP_ADD_MONSTERS:int 					= 4;		public static const STEP_ADD_ITEMS:int 						= 5;		public static const STEP_CONVERT_TILES_TO_SMART_EDGES:int 	= 6;		public static const STEP_MAKE_TILE_OBJECTS:int				= 7;		public static const STEP_PLACE_MONSTERS_ON_TILES:int		= 8;		public static const STEP_TOTAL:int							= 9;				//============================================		//	PUBLIC VARS		//============================================										//============================================		//	PRIVATE VARS		//============================================				// THE REAL REASON WHY YOU CAME HERE		private var _oMinimap:Minimap;		private var _oFloorMap:FloorMap 					= null;				// MAP TWISTER		private var _oMersenneTwister_Maps:MersenneTwister;		private var _anPreviousFloorSteps:Array 					= new Array();		private var _nMapSeed 										= 214;//Math.floor(Math.random() * 500) + 1;				// MONSTER TWISTER		private var _oMersenneTwister_Monsters:MersenneTwister;		private var _anPreviousMonsterSteps:Array 					= new Array();		private var _nMonsterSeed:int 								= 214;//Math.floor(Math.random() * MersenneTwister.SEED_MAX) + 1;					// ITEM TWISTER		private var _oMersenneTwister_Items:MersenneTwister;		private var _anPreviousItemSteps:Array 						= new Array();		private var _nItemSeed:int 									= 214;//Math.floor(Math.random() * MersenneTwister.SEED_MAX) + 1;						private var _fGreatHallDiceRoll:Number 						= 0.0;		private var _fMonsterHouseDiceRoll:Number 					= 0.0;				private var _nCurrentStep:int = STEP_CLEAN_UP;				private var _aoRoomSet:Array;		private var _nMazeWidthInRooms:int;		private var _nMazeHeightInRooms:int;		private var _fDeadEndsRemoved:Number;		private var _fSparseness:Number;		private var _fAdditionalWallsDestroyed:Number;		private var _nRoomWidthInTiles:int;		private var _nRoomHeightInTiles:int;		private var _fGreatHallChance:Number;		private var _fMonsterHouseChance:Number;				private var _nMonsterCount_Min:int = 0		private var _nMonsterCount_Max:int = 0		private var _nItemCount_Min:int	 = 0		private var _nItemCount_Max:int	 = 0				private var _nDungeonType:int;				//////////////////////////////////////////////		//		//	CONSTRUCTOR		//		//////////////////////////////////////////////				/**		*			*/		public function DungeonMaker(mapSeed:int = 200, monsterSeed:int = 200, itemSeed:int = 200):void		{						trace("DungeonMaker::DungeonMaker()");			initializeMersenneTwisters(mapSeed, monsterSeed, itemSeed);		};				//////////////////////////////////////////////		//		//	PUBLIC METHODS		//		//////////////////////////////////////////////				/**		*			*/		public function buildMap(	aoRoomSet:Array, 									nMazeWidthInRooms:int = 3, nMazeHeightInRooms:int = 3, 									fDeadEndsRemoved:Number = 0.0, fSparseness:Number = 0.0, fAdditionalWallsDestroyed:Number = 0.25,									nRoomWidthInTiles:int = 27, nRoomHeightInTiles:int = 27,									fGreatHallChance:Number = 0.0, fMonsterHouseChance:Number = 0.0,									nMonsterCountMin:int = 0, nMonsterCountMax:int = 0,									nItemCountMin:int = 0, nItemCountMax:int = 0,									nDungeonType:int = MapData.MAP_TYPE_DUNGEON									):void		{			trace("DungeonMaker::DungeonMaker()");			_nCurrentStep = STEP_CLEAN_UP;						_aoRoomSet 									= aoRoomSet;			_nMazeWidthInRooms 							= nMazeWidthInRooms;			_nMazeHeightInRooms 						= nMazeHeightInRooms;			_fDeadEndsRemoved 							= fDeadEndsRemoved;			_fSparseness 								= fSparseness;			_fAdditionalWallsDestroyed					= fAdditionalWallsDestroyed;			_nRoomWidthInTiles 							= nRoomWidthInTiles;			_nRoomHeightInTiles 						= nRoomHeightInTiles;			_fGreatHallChance 							= fGreatHallChance;			_fMonsterHouseChance 						= fMonsterHouseChance						_nMonsterCount_Min							= nMonsterCountMin;			_nMonsterCount_Max							= nMonsterCountMax;			_nItemCount_Min								= nItemCountMin;			_nItemCount_Max								= nItemCountMax;						_nDungeonType 								= nDungeonType;						this.addEventListener( Event.ENTER_FRAME, vHandle_this_ENTER_FRAME );				};						/**		*			*/		public function get oFloorMap():FloorMap{			return _oFloorMap;		}						/**		*			*/		private function vHandle_this_ENTER_FRAME(evt:Event):void		{			trace("DungeonMaker::vHandle_this_ENTER_FRAME()");						continueBuildingDungeon(getTimer())		};						/**		*			*/		private function continueBuildingDungeon(nStartTime:int):void		{			switch (_nCurrentStep)			{				case STEP_CLEAN_UP:					cleanUp();				break;								case STEP_CREATE_MAZE:					createMaze(); // this is quick enough to do in one frame.				break; 							case STEP_CREATE_FLOOR_MAP:					createFloorMap(); // this is quick enough to do in one frame.				break; 						case STEP_ROLL_FOR_GREAT_HALL:					rollForGreatHall();				break; 					case STEP_ROLL_FOR_MONSTER_HOUSE:					rollForMonsterHouse();				break; 				case STEP_ADD_MONSTERS:					addMonsters();				break; 							case STEP_ADD_ITEMS:					addItems();				break; 								case STEP_CONVERT_TILES_TO_SMART_EDGES:					convertTilesToSmartEdges()				break;				case STEP_MAKE_TILE_OBJECTS:					makeTileObjects();				break;				case STEP_PLACE_MONSTERS_ON_TILES:					placeMonstersOnTiles();				break;			}						_nCurrentStep++;			if ( _nCurrentStep >= STEP_TOTAL )			{				// stop!				trace("DungeonMaker::continueBuildingDungeon() -> DUNGEON BUILT!");				this.removeEventListener( Event.ENTER_FRAME, vHandle_this_ENTER_FRAME );				dispatchEvent(new Event(Event.COMPLETE));			}			else			{				if ( bMoreCalculationTimeThisFrame(nStartTime) ) 				{					continueBuildingDungeon(nStartTime);				}				else				{					trace("DungeonMaker::continueBuildingDungeon() -> USED MAX CYCLES, RESUMING NEXT FRAME!");				}			}		};						/**		*			*/		private function bMoreCalculationTimeThisFrame(nStartTime:int):Boolean		{			var nElapsedTime:int = getTimer() - nStartTime;			if ( nElapsedTime >= MAX_CALCULATION_TIME ) return false;			return true;		}				//============================================		//	MAZE MAKING PROCESSES		//============================================		/**		*			*/		public function cleanUp():void		{						MazeCreator.cleanUp();			RoomCreator.cleanUp();						_fGreatHallDiceRoll = 0.0;			_fMonsterHouseDiceRoll = 0.0;						if ( _oFloorMap != null )			{				_oFloorMap.cleanUp();				_oFloorMap = null;			}						if (_oMinimap != null)			{				// destroy minimap				_oMinimap.cleanUp();				_oMinimap = null;			}			if (_oFloorMap != null)			{				// destroy floor map				_oFloorMap = null;			}						// MonsterCreator.cleanUp();			// ItemCreator.cleanUp();		}						/**		*			*/		private function createMaze():void		{			_oMinimap = MazeCreator.aoGenerateMaze(			_oMersenneTwister_Maps, 															_nMazeWidthInRooms, 															_nMazeHeightInRooms, 															_fDeadEndsRemoved, 															_fSparseness,															_fAdditionalWallsDestroyed															);		};						/**		*			*/		private function createFloorMap():void		{			_oFloorMap = RoomCreator.oGenerateFloorMap(		_oMersenneTwister_Maps,															_oMinimap, 															_aoRoomSet, 															_nRoomWidthInTiles,     															_nRoomHeightInTiles,															_nDungeonType															);		};						/**		*			*/		private function rollForGreatHall():void		{			_fGreatHallDiceRoll = MersenneTwister.nGenerateRandomFloatFromInstance(_oMersenneTwister_Maps);			if (_fGreatHallChance >= _fGreatHallDiceRoll) RoomCreator.vCreateGreatHall(_oFloorMap);		};						/**		*			*/		private function rollForMonsterHouse():void		{			/*			_fMonsterHouseDiceRoll = MersenneTwister.nGenerateRandomFloatFromInstance(_oMersenneTwister_Maps);			if (_fMonsterHouseChance >= _fMonsterHouseDiceRoll) MonsterCreator.vCreateMonsterHouse(_oFloorMap)			*/		};						/**		*			*/		private function addMonsters():void		{			// Wed Sep 23 19:51:15 CDT 2009 CMD TODO: TAKE SOME PRECAUTIONS IF WE'VE MADE A MONSTER HOUSE AND/OR A GREAT HALL			MonsterCreator.addMonsters(_oFloorMap, _oMersenneTwister_Monsters, _nMonsterCount_Min, _nMonsterCount_Max);		};						/**		*			*/		private function addItems():void		{			ItemCreator.addItems(_oFloorMap, _oMersenneTwister_Items, _nItemCount_Min, _nItemCount_Max);		};						/**		*			*/		private function convertTilesToSmartEdges():void		{			TileConverter.vConvertMap(_oFloorMap);			//ArrayUtils.traceArray2D(_oFloorMap.tiles);		};						/**		*			*/		private function makeTileObjects():void		{			_oFloorMap.makeTileObjects();		};						/**		*			*/		private function placeMonstersOnTiles():void		{			_oFloorMap.placeMonstersOnTiles();		};								//////////////////////////////////////////////		//		//	GETTERS		//		//////////////////////////////////////////////								//////////////////////////////////////////////		//		//	SETTERS		//		//////////////////////////////////////////////								//////////////////////////////////////////////		//		//	EVENT HANDLERS		//		//////////////////////////////////////////////								//////////////////////////////////////////////		//		//	PRIVATE METHODS		//		//////////////////////////////////////////////				private function initializeMersenneTwisters(mapSeed:int, monsterSeed:int, itemSeed:int):void		{			trace("DungeonMaker::initializeMersenneTwisters()");			// initialize mersenne twisters!			_nMapSeed = mapSeed;			_nMonsterSeed = monsterSeed;			_nItemSeed = itemSeed;						_oMersenneTwister_Monsters 			= new MersenneTwister(_nMonsterSeed);			_oMersenneTwister_Items 			= new MersenneTwister(_nItemSeed);			_oMersenneTwister_Maps 				= new MersenneTwister(_nMapSeed);						for (var i:int = 0; i < 1; i++)			{				_oMersenneTwister_Maps.nGenerateRandomNumber();				_oMersenneTwister_Monsters.nGenerateRandomNumber();				_oMersenneTwister_Items.nGenerateRandomNumber();			}						_anPreviousFloorSteps.push(_oMersenneTwister_Maps.step);			_anPreviousMonsterSteps.push(_oMersenneTwister_Monsters.step);			_anPreviousItemSteps.push(_oMersenneTwister_Items.step);		};	}}