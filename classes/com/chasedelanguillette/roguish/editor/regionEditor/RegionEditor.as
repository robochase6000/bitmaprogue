package com.chasedelanguillette.roguish.editor.regionEditor{	import flash.events.*;	import flash.display.*;	import flash.geom.Rectangle;		import com.chasedelanguillette.roguish.editor.regionEditor.DragSelection;	import com.chasedelanguillette.roguish.editor.regionEditor.InputEvent;	import com.chasedelanguillette.roguish.editor.regionEditor.Input;	import com.chasedelanguillette.roguish.editor.regionEditor.FPSCounter;	import com.chasedelanguillette.roguish.editor.regionEditor.ModeManager;	import com.chasedelanguillette.roguish.editor.regionEditor.XMLWriter;	import com.chasedelanguillette.roguish.editor.roomEditor.MapData;		import com.chasedelanguillette.roguish.maps.sections.Room;			public class RegionEditor extends MovieClip	{		// scale		private static var _fTileSize:Number = 10;				// modes		public static const MODE_NONE:int 				= -1;		public static const MODE_SELECTION_EDIT:int 	= 0;			public static const MODE_DELETE:int 			= 1;		public static const MODE_TWEAK:int 				= 2;					public static const COLOR_RED:uint				= 0xff0000;		public static const COLOR_BLUE:uint				= 0x6666ff;		public static const COLOR_GREEN:uint			= 0x66ff66;		public static const COLOR_YELLOW:uint			= 0x33ffff;				public static const REGION_0:int				= COLOR_RED;		public static const REGION_1:int 				= COLOR_GREEN;				// sprites		private var oBitmapContainer:Sprite 					= new Sprite();		private var oDrawLayer_DragSelection:Sprite 			= new Sprite();		private var oInputSprite:Sprite 						= new Sprite();		private var oDrawLayer_this:Sprite 						= new Sprite();		private var oRegions:Sprite								= new Sprite();				// specials		private var oInputManager:Input;		private var oDragSelection:DragSelection;		private var oFPSCounter:FPSCounter;		private var oRoomModeManager:ModeManager;				// misc		private var oSelectionRectangle:Room;		private var m_nCurrentMode:int = MODE_NONE;		private var aoRegions:Array = new Array();						// Fri Aug 14 12:15:10 CDT 2009 CMD TODO: REWRITE THIS CLASS SO THAT IT CAN HANDLE RECTANGULAR TILES		public function RegionEditor(stageRef:Stage, nTileSize:int, bEnabled:Boolean = false):void		{			_fTileSize = nTileSize;						this.addEventListener( Event.ADDED_TO_STAGE, vHandle_this_ADDED_TO_STAGE );			oFPSCounter = new FPSCounter(0,0,0xff0000);			oFPSCounter.name = "fpsCounter";			addChild(oBitmapContainer);			addChild(oDrawLayer_DragSelection);			addChild(oInputSprite);			addChild(oFPSCounter);			addChild(oDrawLayer_this);			addChild(oRegions);						oDragSelection = new DragSelection(stageRef, oDrawLayer_DragSelection, _fTileSize, _fTileSize);			oDragSelection.vSetEnabled(bEnabled);						oRoomModeManager = new ModeManager(0, 2);						vSetEnabled(bEnabled);		};						//============================================		//	PUBLICS		//============================================				public function vSetMapData(oMapData:MapData):void		{			trace("RegionEditor::vSetMapData()");			var i:int;			var region:Room;						for (i = 0; i < oMapData.rooms.length; i++)			{				region = oMapData.rooms[i];				region = oConvertTileRegionToScreenRegion(region);				vAddRegionGraphic(region, 0)			}						for (i = 0; i < oMapData.exits.length; i++)			{				region = oMapData.exits[i];				region = oConvertTileRegionToScreenRegion(region);				vAddRegionGraphic(region, 1)			}		};				public function vSetEnabled(bEnabled:Boolean):void		{			trace("RegionEditor::vSetEnabled(bEnabled: " + bEnabled + ")");			oDragSelection.vSetEnabled(bEnabled);			if (bEnabled)			{				oDragSelection.addEventListener(InputEvent.DRAG_SELECTION_COMPLETE, vDragSelectionComplete);				this.addEventListener(Event.ENTER_FRAME, vHandle_this_ENTER_FRAME);			}			else			{				oDragSelection.removeEventListener(InputEvent.DRAG_SELECTION_COMPLETE, vDragSelectionComplete);				this.removeEventListener(Event.ENTER_FRAME, vHandle_this_ENTER_FRAME);			}		};				public function xmlGetRegionInfo():XML		{			trace("RegionEditor::xmlGetRegionInfo()");			XMLWriter.vReset();			for ( var i in aoRegions )			{				var oRegion:Region = aoRegions[i];				var tileRegion:Room = oConvertRectangleToTiles(oRegion.region)				XMLWriter.vAddRegion(tileRegion, oRegion.type);			}			return XMLWriter.vGenerateXML()		}						//============================================		//	PRIVATES		//============================================		private function makeSelection(selection:Object):void		{			// figure out what the selection rectangle is			oSelectionRectangle = null;			oSelectionRectangle = new Room(selection.x1, selection.y1, 0, 0);			if ( selection.x2 < selection.x1 )			{				oSelectionRectangle.x = selection.x2;			}			oSelectionRectangle.width = Math.abs(selection.x1 - selection.x2);									if ( selection.y2 < selection.y1 )			{				oSelectionRectangle.y = selection.y2;							}			oSelectionRectangle.height = Math.abs(selection.y1 - selection.y2);			vDrawSelectionRectangle();			m_nCurrentMode = MODE_SELECTION_EDIT;		};				private function vAdjustSelection(nx, ny, shift:Boolean, control:Boolean):void		{			if ( shift ){				if (control){					if (Math.abs(nx) > 0)					{						oSelectionRectangle.width -= 1 * _fTileSize;						if (nx > 0)						{							// leave alone						} 						else 						{							oSelectionRectangle.x += 1 * _fTileSize;						}					}					if ( Math.abs(ny) > 0)					{						oSelectionRectangle.height -= 1 * _fTileSize;						if (ny > 0)						{													}						else						{							oSelectionRectangle.y += 1 * _fTileSize;						}					}				} 				else				{					oSelectionRectangle.x += nx * _fTileSize;					oSelectionRectangle.y += ny * _fTileSize;				}			} else {				if (Math.abs(nx) > 0)				{					oSelectionRectangle.width += 1 * _fTileSize;					if (nx > 0)					{						// leave alone					} 					else 					{						oSelectionRectangle.x -= 1 * _fTileSize;					}				}				if ( Math.abs(ny) > 0)				{					oSelectionRectangle.height += 1 * _fTileSize;					if (ny > 0)					{											}					else					{						oSelectionRectangle.y -= 1 * _fTileSize;					}				}			}						vDrawSelectionRectangle();		}				private function vDrawSelectionRectangle():void		{			oDrawLayer_this.graphics.clear();			oDrawLayer_this.graphics.lineStyle(1, 0xff0000, 1.0);			oDrawLayer_this.graphics.beginFill(0xff0000, 0.5);			oDrawLayer_this.graphics.drawRect(oSelectionRectangle.x, oSelectionRectangle.y, oSelectionRectangle.width, oSelectionRectangle.height);			oDrawLayer_this.graphics.endFill();		};				private function vAddSelectionToList(region:Room, nRegionType:int):void		{			trace("MapEditorPro::vAddSelectionToList()");			m_nCurrentMode = MODE_NONE;			var tileRegion:Room = oConvertRectangleToTiles(region);			vAddRegionGraphic(region, nRegionType);			oDragSelection.vSetEnabled(true);			oDrawLayer_this.graphics.clear();		};				private function vAddRegionGraphic(region:Room, nRegionType:int):void		{						var color:uint;			switch (nRegionType)			{				case 0 :					color = REGION_0;				break;				case 1 :					color = REGION_1;				break;			}						var oNewRegion:Region = new Region(nRegionType, color, region.x, region.y, region.width, region.height);			oNewRegion.addEventListener(MouseEvent.CLICK, vHandle_oNewRegion_CLICK)			oRegions.addChild(oNewRegion);			aoRegions.push(oNewRegion);		};				private function bRemoveRegion(region:Region):Boolean		{			for (var r:int = 0; r < aoRegions.length; r++)			{				if ( aoRegions[r] == region )				{					aoRegions.splice(r, 1);					trace("MapEditorPro::vRemoveRegion() -> Region removed!" );					return true;				}			}			trace("MapEditorPro::bRemoveRegion() -> Could not find region in list!" );			return false;		};				private function oConvertRectangleToTiles(sourceRect:Room):Room		{			var rect:Room = new Room();			rect.x = sourceRect.x / _fTileSize;			rect.y = sourceRect.y / _fTileSize;			rect.width = sourceRect.width / _fTileSize;			rect.height = sourceRect.height / _fTileSize;			return rect;		};				private function oConvertTileRegionToScreenRegion(sourceRect:Room):Room		{			var rect:Room = new Room();			rect.x = sourceRect.x * _fTileSize;			rect.y = sourceRect.y * _fTileSize;			rect.width = sourceRect.width * _fTileSize;			rect.height = sourceRect.height * _fTileSize;			return rect;		};						//============================================		//	EVENTS		//============================================				protected function vHandle_this_ADDED_TO_STAGE(evt:Event):void		{			trace("RegionEditor::vHandle_this_ADDED_TO_STAGE()");			oInputManager = new Input(oInputSprite);		}				private function vHandle_this_ENTER_FRAME(evt:Event):void		{			vHandleUserInput_Global();			switch (m_nCurrentMode)			{				case MODE_SELECTION_EDIT:					vHandle_SelectionEdit_ENTER_FRAME(evt);				break;			}			Input.update();		};				private function vHandle_SelectionEdit_ENTER_FRAME(evt:Event):void		{			vHandleUserInput_SelectionEditMode();					};				private function vHandle_oNewRegion_CLICK(evt:MouseEvent):void		{			trace("MapEditorPro::vHandle_oNewRegion_CLICK()");			var oRegion:Region = evt.target as Region;			switch(m_nCurrentMode)			{				case MODE_NONE:					// remove this one				break;				case MODE_TWEAK:					trace("MapEditorPro::vHandle_oNewRegion_CLICK() -> TWEAK THIS!");					makeSelection({x1:evt.target.region.x, y1:evt.target.region.y, x2:evt.target.region.x + evt.target.region.width, y2:evt.target.region.y + evt.target.region.height})					vDeleteRegion(oRegion);				break;				case MODE_SELECTION_EDIT:					// tweak this one!				break;				case MODE_DELETE :					trace("MapEditorPro::vHandle_oNewRegion_CLICK() -> DELETE THIS!");					vDeleteRegion(oRegion);				break;							}		};				private function vDeleteRegion(oRegion:Region):void		{			bRemoveRegion(oRegion);			oRegions.removeChild(oRegion);			oRegion.removeEventListener(MouseEvent.CLICK, vHandle_oNewRegion_CLICK);			oRegion = null;		};				private function vDragSelectionComplete(evt:InputEvent):void		{			trace( "vDragSelectionComplete()" );			var selection:Object = oDragSelection.oGetSelection();			oDragSelection.vResetSelection();			makeSelection(selection);		};						//============================================		//	KEYBOARD INPUT		//============================================		private function vHandleUserInput_Global():void		{			if (Input.isKeyPressed(49)) // 1			{				oRoomModeManager.vSetMode(0);			} 			else if (Input.isKeyPressed(50)) // 2			{				oRoomModeManager.vSetMode(1);			} 			/*			else if (Input.isKeyPressed(51)) // 3			{				oRoomModeManager.vSetMode(2);			} 			else if (Input.isKeyPressed(52)) // 4			{				oRoomModeManager.vSetMode(3);			} 			else if (Input.isKeyPressed(53)) // 5			{				oRoomModeManager.vSetMode(4);			};			*/						if (Input.isKeyPressed(78)) // N			{				if ( m_nCurrentMode != MODE_SELECTION_EDIT)				{					trace("MapEditorPro::vHandleUserInput_Global() -> mode: NONE !!");					m_nCurrentMode = MODE_NONE;				}			} 			else if (Input.isKeyPressed(84)) // T			{				if ( m_nCurrentMode != MODE_SELECTION_EDIT)				{					trace("MapEditorPro::vHandleUserInput_Global() -> mode: TWEAK !!");					m_nCurrentMode = MODE_TWEAK;					oDragSelection.vSetEnabled(false)				}			}			else if (Input.isKeyPressed(68)) // D			{				if ( m_nCurrentMode != MODE_SELECTION_EDIT)				{					trace("MapEditorPro::vHandleUserInput_Global() -> mode: DELETE !!");										m_nCurrentMode = MODE_DELETE;					oDragSelection.vSetEnabled(false)				}			}						if (Input.isKeyPressed(80)) // P			{				// print output!				//vPrintOutput();			}		};		private function vHandleUserInput_SelectionEditMode():void		{			var bShiftDown:Boolean = false;			if (Input.isKeyDown(16)) bShiftDown = true;						var bCtrlDown:Boolean = false;			if (Input.isKeyDown(17)) bCtrlDown = true;						var nX:int = 0;			var nY:int = 0;						if (Input.isKeyPressed(37)){				nX = -1			} else if (Input.isKeyPressed(39)){				nX = 1;			}						if (Input.isKeyPressed(38)){				nY = -1			} else if (Input.isKeyPressed(40)){				nY = 1;			}						if ( Math.abs(nX) > 0 || Math.abs(nY) > 0)			{				vAdjustSelection(nX, nY, bShiftDown, bCtrlDown);			}			else			{				if (Input.isKeyPressed(13)){ // enter!					vAddSelectionToList(oSelectionRectangle, oRoomModeManager.nCurrentMode);					trace("selection confirmed! ("+ (oSelectionRectangle.x / _fTileSize) + " , " + (oSelectionRectangle.y / _fTileSize) + " , " + (oSelectionRectangle.width / _fTileSize) + " , " + (oSelectionRectangle.height / _fTileSize) + ")");				}			}		}					}}